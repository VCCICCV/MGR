[package]
edition = "2024"
name = "mgr"
version = "0.1.0"
# 发布配置
[profile.release]
codegen-units = 1 # 使用单一代码生成单元，允许更多的跨模块优化
debug = false # 不包含调试信息，减小二进制大小
incremental = false # 禁用增量编译，确保每次构建都是完整的优化
lto = "fat" # 启用全程序链接时优化，可能会显著提高性能，但会增加编译时间
opt-level = 3 # 最高级别的优化，以获得最佳性能
overflow-checks = false # 禁用整数溢出检查，略微提高性能（但要小心使用）
panic = 'abort' # 在 panic 时直接终止程序，减小二进制大小并略微提高性能
strip = true # 去除符号信息，进一步减小二进制大小
# 开发配置
[profile.dev]
split-debuginfo = "unpacked"

[workspace]
# 工作区成员
members = [
  "migration",
  "sea-orm-adapter",
  "axum-casbin",
  "server/bin",
  "server/api",
  "server/config",
  "server/model",
  "server/router",
  "server/service",
  "server/shared",
  "server/initialize",
  "server/middleware",
  "xdb",
]
[workspace.package]
authors = ["chaochen497@gmail.com"]
edition = "2024"
publish = false
version = "0.1.0"
[[bin]]
name = "admin"
path = "./src/bin/main.rs"
# 工作区依赖
[workspace.dependencies]
# 异步运行时
tokio = {version = "1", features = ["full"]}
# 异步 WebSocket
tokio-tungstenite = "0.26.2"
# 异步 trait 支持
async-std = {version = "1.13", default-features = false}
async-trait = {version = "0.1", default-features = false}
# =========================================
# Web框架和中间件（底层 Web 框架）
# =========================================
# 相关的 HTTP 库
axum = "0.8.3"
# axum提取器
axum-extra = {version = "0.10.1", features = ["typed-header"]}
# 处理HTTP请求例如跨域处理
tower-http = {version = "0.6.2", features = ["cors", "trace"]}
# 处理HTTP请求例如解析请求体
# hyper = { version = "1.4.1", features = ["full"] }
# 数据校验,表单验证
validator = {version = "0.20.0", features = ["derive"]}
#Media Type
mime = "0.3.17"
# HTTP headers 处理库
headers = "0.4"
# =========================================
# Casbin依赖
# =========================================
bytes = "1.8"
casbin = {version = "2.10", default-features = false}
futures = "0.3"
http = "1.3.1"
http-body = "1.0.1"
http-body-util = "0.1.2"
tower = {version = "0.5", features = ["full"]}
# =========================================
# JWT和身份认证
# =========================================
# JWT
jsonwebtoken = "9.3.1"

# =========================================
# 数据库 ORM 和适配器（底层数据库操作）
# =========================================
# ORM
sea-orm = {version = "1.1.10", features = [
  "runtime-tokio-native-tls",
  "sqlx-postgres",
  "macros",
]}
# redis 客户端
redis = {version = "0.29.2", features = ["aio", "tokio-comp", "cluster-async", "connection-manager"]}
# 使用tokio实现的连接池，支持postgres、redis、redis cluster、rsmq等
bb8 = "0.9.0"
bb8-redis = "0.21.0"
# Kafka
rdkafka = {version = "0.37.0", features = ["cmake-build"]}
# 异步 kafka 客户端
# rdkafka-sys = "4.7.0"
# ES
elasticsearch = "8.15.0-alpha.1"
# =========================================
# 测试相关依赖（用于测试）
# =========================================
#用#[automock]模拟测试
mockall = "0.13.1"
# axum 测试助手
test-context = "0.4.1"
# =========================================
# 序列化和反序列化
# =========================================
# 序列化和反序列化数据
serde = {version = "1.0.219", features = ["derive"]}
# 序列化和反序列化数据JSON
serde_json = {version = "1.0.140", features = ["std"]}
# 序列化和反序列化数据YAML
serde_yaml = "0.9.34"
# =========================================
# 并行和多线程库
# =========================================
rayon = "1.10"
# =========================================
# 错误处理
# =========================================
# 自定义错误
thiserror = "2.0.12"
# 错误处理，提供 Result 类型和错误转换
# anyhow = "1.0.97"
# =========================================
# 环境配置
# =========================================
# 配置
config = "0.15.11"
# 读取env
dotenvy = "0.15.7"
# =========================================
# 表单编码相关
# =========================================
form_urlencoded = "1.2"
# =========================================
# 日志和监控
# =========================================
# 日志
log = "0.4.27"
# 日志派生
log-derive = "0.4.1"
# 分布式跟踪的 SDK，用于采集监控数据，这里用其日志功能
# attributes自动为函数添加追踪
# 在函数定义前添加 #[tracing::instrument]，当函数被调用时，tracing 库会自动记录函数的进入、退出情况以及执行时长等信息，并且可以携带函数的参数等作为额外的上下文信息
tracing = {version = "0.1.41", features = ["attributes", "log"]}
# 将 Rust 的错误类型与 Tracing 的 span 相关联的库
# 当出现错误时，通常希望能将错误的发生与当时的执行上下文（也就是 tracing 所记录的 span 相关信息）结合起来，以便更好地理解错误产生的背景和原因
tracing-error = "0.2.1"
# 配置和管理 tracing 所产生的日志和追踪数据的收集、格式化以及输出等操作
tracing-subscriber = {version = "0.3", default-features = true, features = [
  "std",
  "env-filter",
  "registry",
  "local-time",
  "fmt",
]}
# 处理日志数据的写入目标和写入方式
tracing-appender = "0.2.3"
# 用于将 Rust 标准库中的 log 宏记录的日志与 tracing 库的日志记录机制进行集成，使得使用 log 宏编写的旧有日志记录代码能够无缝地与基于 tracing 的新日志系统协同工作，方便在项目迁移或者同时使用两种日志记录方式的场景下进行统一管理和输出
tracing-log = "0.2.0"
# 用于将 tracing 库产生的日志按照 Bunyan 格式进行格式化的库
tracing-bunyan-formatter = "0.3.10"
# 链路追踪
opentelemetry = "0.29.1"
opentelemetry-otlp = {version = "0.29.0", features = [
  "trace",
  "metrics",
  "grpc-tonic",
]}
opentelemetry_sdk = {version = "0.29.0", features = ["rt-tokio"]}
tracing-opentelemetry = "0.30.0"
# 捕获错误、监控错误、告警
sentry = "0.37.0"
# =========================================
# 其他工具
# =========================================
# TOML 文件格式处理库
toml = "0.8"

# 时间处理
chrono = {version = "0.4.40", features = ["serde"]}
# uuid
# uuid = {version = "1.16.0", features = ["v4", "serde"]}
# uLid
ulid = "1.2"
# 密码哈希加盐
password-hash = "0.5.0"
# 密码哈希
argon2 = {version = "0.5.3", features = ["std", "password-hash"]}
# 邮件
lettre = {version = "0.11.15", features = ["tokio1-native-tls", "builder"]}
# 异步锁
once_cell = "1.21.3"
# 枚举处理
strum = {version = "0.27.1", features = ["derive"]}
# 异步请求
reqwest = {version = "0.12.15", features = ["json", "multipart", "stream"]}
# 编码
base64 = "0.22.1"
# 模拟数据
fake = {version = "4.2.0", features = ["derive", "uuid", "chrono"]}
# 随机数生成
rand = "0.9.1"
# 消息码
ring = "0.17"
# 并发缓存，比 dashmap 更高的吞吐量
moka = {version = "0.12", features = ["sync"]}
# MD5 哈希算法
md-5 = "0.10"
# 替代标准库的同步原语，锁性能高10倍+
parking_lot = "0.12"
# 十六进制编码/解码
hex = "0.4"
# 编码String
urlencoding = "2.1.3"
#
derive-new = "0.7"
# 延迟静态初始化库
lazy_static = "1.5"
